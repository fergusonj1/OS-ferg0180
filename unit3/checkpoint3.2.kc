// XMega65 Kernal Development Template
// Each Function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")

// Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;
const char RED = 2;

//Some text to display
char[] MESSAGE = "checkpoint 3.1 by ferg0180";

unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;


void reset() {
// Initialize screen memory, and select correct font
			*VIC_MEMORY = 0x14;
			// Fill the screen with spaces
			memset(SCREEN,' ',40*25);
			//Set the color of every character on the screen to white
			memset(COLS, WHITE, 40*25);
			
			// print to screen
			print_to_screen("ferg0180 operating system starting...");
			print_newline();
			print_to_screen("testing hardware");
			print_newline();
			print_to_screen("memory found at $0800 - $8000");
			print_newline();
			print_to_screen("finished testing hardware ");

test_memory();

			// Loop forever 
			while(true) {
			}	
}
	
void main() {
}


void print_to_screen(char *message) {

	while(*message){
		*(current_screen_line + current_screen_x) = *message++;
		current_screen_x++;
	}	
}
	
	
void print_newline() {

	current_screen_line += $28; //40 in decimal
	current_screen_x = 0;
}

unsigned short mem_start = $0800;
unsigned short mem_end = $8000;

volatile unsigned char *p;

void print_hex(unsigned short value) 
{

	char[5] hex;
	unsigned char i;
	for(i=0;i<4;i++) {
		if (value<0xa000) hex[i]='0'+(char)(value>>12);
			else hex[i] = (char) (value>>12) -9;
			value<<=4;
	}
	
	hex[4]=0;
	print_to_screen(hex);
}


void test_memory() {
	for(p=mem_start;p<mem_end;p+=$10) {
	
		for(char i=0;i<255;i++) {
			*p = i;
				if (*p != i){
				print_to_screen("memory error found");
			}
		}
	}
	print_hex((unsigned short)*p);
	print_newline();
	print_to_screen("the value is $");
	print_hex($1234);
	print_newline();

}

	
//Here are a couple sample SYSCALL handlers that just display a character on the screen
void syscall1() {
			*(SCREEN+79) = '>';
			exit_hypervisor();
			}
			
void syscall2() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}
		
void syscall3() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}
			
void syscall4() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}
			
void syscall5() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}		
			
void syscall6() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall7() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall8() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}
			
void syscall9() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall10() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void securentr() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void securexit() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
		
void syscall13() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall14() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall15() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall16() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}					
			
void syscall17() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall18() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall19() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall20() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall21() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}		
			
void syscall22() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall23() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall24() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall25() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall26() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall27() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}		
			
void syscall28() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall29() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall30() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall31() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall32() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall33() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall34() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall35() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall36() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall37() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}	
			
void syscall38() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall39() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall40() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall41() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall42() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall43() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall44() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall45() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall46() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall47() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall48() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall49() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall50() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall51() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall52() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall53() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall54() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
						
void syscall55() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall56() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall57() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall58() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall59() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall60() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall61() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall62() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}			
			
void syscall63() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}	
			
void syscall64() {
			*(SCREEN+78) = '<';
			exit_hypervisor();
			}					
			

void pagfault() {
}

void restorkey() {
}

void alttabkey() {
}

void vf011rd() {
}

void vf011wr() {
}

void reserved() {
}

void cpukil() {
}

void exit_hypervisor() {

*(unsigned char *) $d67f = $01;
}
			
			
// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The structure of each entry point is JMP <handler address> + NOP.
//we have a char (xjmp) to hold the opcode for the JMP instruction,
//and then put the address of the SYSCALL/trap handler in the next
//two points as a pointer, and end with the NOP instruction opcode.
struct SysCall {
		char xjmp;							// Holds $4c, the JMP $nnnn opcode
		void()* syscall;			// Holds handler address, will be the target of the JMP
		char xnop;						// Holds $EA, the NOP opcode
};

//To save writing 0x4C and 0xEA all the time, we define them as constants
const char JMP = 0x4c;
const char NOP = 0xea;

//Now we can have a nice table of up to 64 SYSCALL handlers expressed
//in a fairly readable and easy format.
//Each line is an instance of the struct Syscall from above, with the JMP
//opcode value, the address of the handler routine and the NOP opcode value.
export struct SysCall[] SYSCALLS = {
		{ JMP, &syscall1, NOP },
		{ JMP, &syscall2, NOP },
		{ JMP, &syscall3, NOP },
		{ JMP, &syscall4, NOP },
		{ JMP, &syscall5, NOP },
		{ JMP, &syscall6, NOP },
		{ JMP, &syscall7, NOP },
		{ JMP, &syscall8, NOP },
		{ JMP, &syscall9, NOP },
		{ JMP, &syscall10, NOP },
		{ JMP, &securentr, NOP },
		{ JMP, &securexit, NOP },
		{ JMP, &syscall13, NOP },
		{ JMP, &syscall14, NOP },
		{ JMP, &syscall15, NOP },
		{ JMP, &syscall16, NOP },
		{ JMP, &syscall17, NOP },
		{ JMP, &syscall18, NOP },
		{ JMP, &syscall19, NOP },
		{ JMP, &syscall20, NOP },
		{ JMP, &syscall21, NOP },
		{ JMP, &syscall22, NOP },
		{ JMP, &syscall23, NOP },
		{ JMP, &syscall24, NOP },
		{ JMP, &syscall25, NOP },
		{ JMP, &syscall26, NOP },
		{ JMP, &syscall27, NOP },
		{ JMP, &syscall28, NOP },
		{ JMP, &syscall29, NOP },
		{ JMP, &syscall30, NOP },
		{ JMP, &syscall31, NOP },
		{ JMP, &syscall32, NOP },
		{ JMP, &syscall33, NOP },
		{ JMP, &syscall34, NOP },
		{ JMP, &syscall35, NOP },
		{ JMP, &syscall36, NOP },
		{ JMP, &syscall37, NOP },
		{ JMP, &syscall38, NOP },
		{ JMP, &syscall39, NOP },
		{ JMP, &syscall40, NOP },
		{ JMP, &syscall41, NOP },
		{ JMP, &syscall42, NOP },
		{ JMP, &syscall43, NOP },
		{ JMP, &syscall44, NOP },
		{ JMP, &syscall45, NOP },
		{ JMP, &syscall46, NOP },
		{ JMP, &syscall47, NOP },
		{ JMP, &syscall48, NOP },
		{ JMP, &syscall49, NOP },
		{ JMP, &syscall50, NOP },
		{ JMP, &syscall51, NOP },
		{ JMP, &syscall52, NOP },
		{ JMP, &syscall53, NOP },
		{ JMP, &syscall54, NOP },
		{ JMP, &syscall55, NOP },
		{ JMP, &syscall56, NOP },
		{ JMP, &syscall57, NOP },
		{ JMP, &syscall58, NOP },
		{ JMP, &syscall59, NOP },
		{ JMP, &syscall60, NOP },
		{ JMP, &syscall61, NOP },
		{ JMP, &syscall62, NOP },
		{ JMP, &syscall63, NOP },
		{ JMP, &syscall64, NOP }
		};
		
//In this example we had only two SYSCALLs defined, so rather than having
//another 62 lines, we can just ask KickC to make the TRAP table begin
//at the next multiple of $100, i.e., at $8100.
export align(0x100) struct SysCall[] SYSCALL_RESET = {
		{ JMP, &reset, NOP },
		{ JMP, &pagfault, NOP },
		{ JMP, &restorkey, NOP },
		{ JMP, &alttabkey, NOP },
		{ JMP, &vf011rd, NOP },
		{ JMP, &vf011wr, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &reserved, NOP },
		{ JMP, &cpukil, NOP }
		};
		
		













			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
									